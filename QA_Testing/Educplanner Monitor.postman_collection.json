{
	"info": {
		"_postman_id": "1855578c-34b9-48c8-95f2-ff820a4bfadb",
		"name": "Educplanner Monitor",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38874533"
	},
	"item": [
		{
			"name": "Autenticar usuario",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parsear la respuesta JSON\r",
							"let response = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Validar que el éxito sea verdadero\r",
							"pm.test(\"El login fue exitoso\", function () {\r",
							"    pm.expect(response.success).to.be.true;\r",
							"});\r",
							"// Obtener los valores esperados desde las variables de entorno\r",
							"let userEmail = pm.environment.get(\"userEmail\");\r",
							"// Obtener los valores de userId y roles de la respuesta\r",
							"let userId = response.data.userId; // Corregido el acceso a userId\r",
							"let roles = response.data.roles;\r",
							"\r",
							"// Guardar el userId y el rol en las variables de entorno\r",
							"pm.environment.set(\"userId\", userId);\r",
							"pm.environment.set(\"userRole\", roles[0]); // Asumimos que hay al menos un rol\r",
							"\r",
							"// Validar que el email es el esperado\r",
							"pm.test(\"El email es correcto\", function () {\r",
							"    pm.expect(response.data.email).to.eql(userEmail);\r",
							"});\r",
							"\r",
							"// Mostrar en consola que los valores fueron guardados\r",
							"console.log(\"El userId fue guardado exitosamente: \" + userId);\r",
							"console.log(\"El rol fue guardado exitosamente: \" + roles[0]);\r",
							"\r",
							"// Verificar si las variables fueron guardadas correctamente\r",
							"let savedUserId = pm.environment.get(\"userId\");\r",
							"let savedUserRole = pm.environment.get(\"userRole\");\r",
							"\r",
							"// Validar que las variables existen y tienen los valores correctos\r",
							"pm.test(\"El userId fue guardado correctamente\", function () {\r",
							"    pm.expect(savedUserId).to.eql(userId);\r",
							"    console.log(\"El userId guardado es: \" + savedUserId);\r",
							"});\r",
							"\r",
							"pm.test(\"El rol fue guardado correctamente\", function () {\r",
							"    pm.expect(savedUserRole).to.eql(roles[0]);\r",
							"    console.log(\"El rol guardado es: \" + savedUserRole);\r",
							"});\r",
							"\r",
							"// Validar que el token y el refreshToken existen\r",
							"pm.test(\"El token y refreshToken existen\", function () {\r",
							"    pm.expect(response.data.tokens.token).to.be.a(\"string\");\r",
							"    pm.expect(response.data.tokens.refreshToken).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"// Validar que el token no está vacío\r",
							"pm.test(\"El token no está vacío\", function () {\r",
							"    pm.expect(response.data.tokens.token).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// Validar el formato de expiresAt\r",
							"pm.test(\"El formato de expiresAt es válido\", function () {\r",
							"    const expiresAt = response.data.tokens.expiresAt;\r",
							"    pm.expect(new Date(expiresAt).toString()).not.to.eql(\"Invalid Date\");\r",
							"});\r",
							"\r",
							"// Mostrar la hora de expiración en la consola\r",
							"let expiresAt = new Date(response.data.tokens.expiresAt);\r",
							"console.log(\"El token expira el:\", expiresAt);\r",
							"\r",
							"// Validar que el token expira en el futuro\r",
							"pm.test(\"El token expira en el futuro\", function () {\r",
							"    let now = new Date();\r",
							"    pm.expect(expiresAt.getTime()).to.be.above(now.getTime());\r",
							"});\r",
							"\r",
							"// Guardar el token en una variable de entorno\r",
							"pm.environment.set(\"accessToken\", response.data.tokens.token);\r",
							"\r",
							"// Confirmar que el token fue guardado\r",
							"pm.test(\"El token de acceso fue guardado\", function () {\r",
							"    pm.expect(pm.environment.get(\"accessToken\")).to.exist;\r",
							"});\r",
							"\r",
							"// (Opcional) Guardar el refreshToken si lo necesitas más adelante\r",
							"pm.environment.set(\"refreshToken\", response.data.tokens.refreshToken);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "payload",
							"value": "{}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"{{userPassword}}\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				},
				"description": "Autentica un usuario con su correo electrónico y contraseña, devolviendo tokens y detalles del usuario"
			},
			"response": [
				{
					"name": "Autenticación exitosa",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"userId\": \"<long>\",\n  \"email\": \"<string>\",\n  \"roles\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"tokens\": {\n    \"token\": \"<string>\",\n    \"refreshToken\": \"<string>\",\n    \"expiresAt\": \"<dateTime>\"\n  }\n}"
				},
				{
					"name": "Cuerpo de solicitud inválido",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Credenciales inválidas",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "login contraseña incorrecta",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parsear la respuesta JSON\r",
							"let response = pm.response.json();\r",
							"// Validar que el éxito sea verdadero\r",
							"pm.test(\"No autorizado\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "payload",
							"value": "{}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"password\": \"password\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				},
				"description": "Autentica un usuario con su correo electrónico y contraseña, devolviendo tokens y detalles del usuario"
			},
			"response": [
				{
					"name": "Autenticación exitosa",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"userId\": \"<long>\",\n  \"email\": \"<string>\",\n  \"roles\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"tokens\": {\n    \"token\": \"<string>\",\n    \"refreshToken\": \"<string>\",\n    \"expiresAt\": \"<dateTime>\"\n  }\n}"
				},
				{
					"name": "Cuerpo de solicitud inválido",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Credenciales inválidas",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "login con mail inexistente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parsear la respuesta JSON\r",
							"let response = pm.response.json();\r",
							"// Validar que el éxito sea verdadero\r",
							"pm.test(\"No autorizado\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "payload",
							"value": "{}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"mariopassa\",\n  \"password\": \"{{userPassword}}\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"login"
					]
				},
				"description": "Autentica un usuario con su correo electrónico y contraseña, devolviendo tokens y detalles del usuario"
			},
			"response": [
				{
					"name": "Autenticación exitosa",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"userId\": \"<long>\",\n  \"email\": \"<string>\",\n  \"roles\": [\n    \"<string>\",\n    \"<string>\"\n  ],\n  \"tokens\": {\n    \"token\": \"<string>\",\n    \"refreshToken\": \"<string>\",\n    \"expiresAt\": \"<dateTime>\"\n  }\n}"
				},
				{
					"name": "Cuerpo de solicitud inválido",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Credenciales inválidas",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Obtener datos del usuario actual Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Extraer la respuesta de la API\r",
							"const response = pm.response.text();\r",
							"\r",
							"// Variables del entorno\r",
							"const storedUserId = pm.environment.get(\"userId\");\r",
							"const storedUserEmail = pm.environment.get(\"userEmail\");\r",
							"const storedUserRole = pm.environment.get(\"userRole\");\r",
							"\r",
							"// Test 1: Verificar si el ID coincide\r",
							"pm.test(\"El ID coincide\", () => {\r",
							"    pm.expect(response).to.include(storedUserId);\r",
							"});\r",
							"\r",
							"// Test 2: Verificar si el email coincide\r",
							"pm.test(\"El email coincide\", () => {\r",
							"    pm.expect(response).to.include(storedUserEmail);\r",
							"});\r",
							"\r",
							"// Test 3: Verificar si el rol coincide\r",
							"pm.test(\"El rol coincide\", () => {\r",
							"    pm.expect(response).to.include(storedUserRole);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/auth/current-user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"current-user"
					]
				},
				"description": "Devuelve los datos del usuario que ha iniciado sesión actualmente."
			},
			"response": [
				{
					"name": "Datos del usuario obtenidos exitosamente",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/current-user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"current-user"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"id\": \"<long>\",\n  \"email\": \"<string>\",\n  \"roles\": [\n    \"ADMIN\",\n    \"STUDENT\"\n  ],\n  \"isProfileComplete\": \"<boolean>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"profilePhoto\": \"<string>\"\n}"
				},
				{
					"name": "No autorizado. El usuario no ha iniciado sesión o el token es inválido.",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/current-user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"current-user"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Actualizar token de acceso Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"\r",
							"// Validar éxito\r",
							"pm.test(\"La respuesta tiene 'success: true'\", function () {\r",
							"    pm.expect(response.success).to.be.true;\r",
							"});\r",
							"\r",
							"// Validar tokens\r",
							"pm.test(\"El token de acceso está presente\", function () {\r",
							"    pm.expect(response.data.token).to.exist;\r",
							"    pm.expect(response.data.token).to.be.a(\"string\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"El refreshToken está presente\", function () {\r",
							"    pm.expect(response.data.refreshToken).to.exist;\r",
							"    pm.expect(response.data.refreshToken).to.be.a(\"string\").that.is.not.empty;\r",
							"});\r",
							"\r",
							"// Validar formato de expiresAt\r",
							"pm.test(\"El campo 'expiresAt' tiene un formato ISO válido\", function () {\r",
							"    let expiresAt = response.data.expiresAt; // Added variable assignment\r",
							"    let date = new Date(expiresAt);\r",
							"    pm.expect(date.toISOString()).to.eql(new Date(expiresAt).toISOString()); // Fixed the comparison\r",
							"});\r",
							"\r",
							"// Guardar variables de entorno\r",
							"pm.environment.set(\"accessToken\", response.data.token);\r",
							"pm.environment.set(\"refreshToken\", response.data.refreshToken);\r",
							"pm.environment.set(\"expiresAt\", response.data.expiresAt);\r",
							"\r",
							"pm.test(\"Los tokens fueron guardados como variables\", function () {\r",
							"    pm.expect(pm.environment.get(\"accessToken\")).to.exist;\r",
							"    pm.expect(pm.environment.get(\"refreshToken\")).to.exist;\r",
							"    pm.expect(pm.environment.get(\"expiresAt\")).to.exist;\r",
							"});\r",
							"\r",
							"// Validar código de estado\r",
							"pm.test(\"El código de estado es 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Mostrar en consola\r",
							"console.log(\"Token de acceso:\", response.data.token);\r",
							"console.log(\"Refresh token:\", response.data.refreshToken);\r",
							"console.log(\"Expira el:\", response.data.expiresAt);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/auth/refresh",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"refresh"
					]
				},
				"description": "Genera un nuevo token de acceso utilizando un token de actualización válido del encabezado de Autorización"
			},
			"response": [
				{
					"name": "Tokens actualizados exitosamente",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"token\": \"<string>\",\n  \"refreshToken\": \"<string>\",\n  \"expiresAt\": \"<dateTime>\"\n}"
				},
				{
					"name": "Token de actualización inválido o expirado",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/auth/refresh",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"status": "Unauthorized",
					"code": 401,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		},
		{
			"name": "Registro con email usado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verificar si el código de estado es 200 o 409\r",
							"pm.test(\"El código de respuesta es correcto\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 409]);\r",
							"});\r",
							"\r",
							"// Parsear la respuesta JSON\r",
							"let response = pm.response.json();\r",
							"\r",
							"// Manejo para respuesta exitosa\r",
							"if (pm.response.code === 200) {\r",
							"    // Validar que el éxito sea verdadero\r",
							"    pm.test(\"El registro fue exitoso\", function () {\r",
							"        pm.expect(response.success).to.be.true;\r",
							"    });\r",
							"\r",
							"    // Obtener los valores de la respuesta\r",
							"    let userId = response.data.userId;\r",
							"    let userEmail = response.data.email;\r",
							"    let roles = response.data.roles;\r",
							"    let token = response.data.tokens.token;\r",
							"    let refreshToken = response.data.tokens.refreshToken;\r",
							"    let expiresAt = response.data.tokens.expiresAt;\r",
							"\r",
							"    // Guardar los valores en variables de entorno\r",
							"    pm.environment.set(\"userId\", userId);\r",
							"    pm.environment.set(\"userEmail\", userEmail);\r",
							"    pm.environment.set(\"userRole\", roles[0]); // Guarda el primer rol como ejemplo\r",
							"    pm.environment.set(\"accessToken\", token);\r",
							"    pm.environment.set(\"refreshToken\", refreshToken);\r",
							"\r",
							"    // Validar y mostrar los datos guardados\r",
							"    pm.test(\"El userId fue guardado correctamente\", function () {\r",
							"        pm.expect(pm.environment.get(\"userId\")).to.eql(userId);\r",
							"        console.log(\"El userId guardado es: \" + userId);\r",
							"    });\r",
							"\r",
							"    pm.test(\"El email fue guardado correctamente\", function () {\r",
							"        pm.expect(pm.environment.get(\"userEmail\")).to.eql(userEmail);\r",
							"        console.log(\"El email guardado es: \" + userEmail);\r",
							"    });\r",
							"\r",
							"    pm.test(\"El rol fue guardado correctamente\", function () {\r",
							"        pm.expect(pm.environment.get(\"userRole\")).to.eql(roles[0]);\r",
							"        console.log(\"El rol guardado es: \" + roles[0]);\r",
							"    });\r",
							"\r",
							"    pm.test(\"El token y el refreshToken existen y no están vacíos\", function () {\r",
							"        pm.expect(token).to.be.a(\"string\").and.to.not.be.empty;\r",
							"        pm.expect(refreshToken).to.be.a(\"string\").and.to.not.be.empty;\r",
							"        console.log(\"El token guardado es: \" + token);\r",
							"        console.log(\"El refreshToken guardado es: \" + refreshToken);\r",
							"    });\r",
							"\r",
							"    pm.test(\"El formato de expiresAt es válido\", function () {\r",
							"        pm.expect(new Date(expiresAt).toString()).not.to.eql(\"Invalid Date\");\r",
							"        console.log(\"El token expira el: \" + new Date(expiresAt));\r",
							"    });\r",
							"\r",
							"    pm.test(\"El token expira en el futuro\", function () {\r",
							"        let now = new Date();\r",
							"        pm.expect(new Date(expiresAt).getTime()).to.be.above(now.getTime());\r",
							"    });\r",
							"\r",
							"    pm.test(\"El token de acceso fue guardado\", function () {\r",
							"        pm.expect(pm.environment.get(\"accessToken\")).to.exist;\r",
							"    });\r",
							"\r",
							"    pm.test(\"El refreshToken fue guardado correctamente\", function () {\r",
							"        pm.expect(pm.environment.get(\"refreshToken\")).to.exist;\r",
							"    });\r",
							"}\r",
							"\r",
							"// Manejo para error 409\r",
							"else if (pm.response.code === 409) {\r",
							"    // Validar que el éxito sea falso\r",
							"    pm.test(\"El registro falló debido a conflicto\", function () {\r",
							"        pm.expect(response.success).to.be.false;\r",
							"    });\r",
							"\r",
							"    // Validar los detalles del error\r",
							"    pm.test(\"El código de error es USER_ALREADY_REGISTERED\", function () {\r",
							"        pm.expect(response.error.code).to.eql(\"USER_ALREADY_REGISTERED\");\r",
							"    });\r",
							"\r",
							"    pm.test(\"El mensaje de error es correcto\", function () {\r",
							"        pm.expect(response.error.message).to.eql(\"Usuario ya se encuentra registrado con este email\");\r",
							"    });\r",
							"\r",
							"    // Mostrar el error en consola para depuración\r",
							"    console.log(\"Error detectado: \" + response.error.message);\r",
							"    console.log(\"Código de error: \" + response.error.code);\r",
							"    console.log(\"Timestamp: \" + response.error.timestamp);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"mariopassa@mail.com\",\n  \"password\": \"password123\",\n  \"passwordConfirmation\": \"password123\"\n}",
					"options": {
						"raw": {
							"headerFamily": "json",
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/auth/register",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"auth",
						"register"
					]
				},
				"description": "Registra un nuevo usuario en el sistema con los datos proporcionados, devolviendo tokens y detalles del usuario."
			},
			"response": [
				{
					"name": "Registro exitoso",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"passwordConfirmation\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"success\": \"<boolean>\",\n  \"data\": {\n    \"userId\": \"<long>\",\n    \"email\": \"<string>\",\n    \"roles\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"tokens\": {\n      \"token\": \"<string>\",\n      \"refreshToken\": \"<string>\",\n      \"expiresAt\": \"<dateTime>\"\n    }\n  }\n}"
				},
				{
					"name": "Cuerpo de solicitud inválido o datos de registro incorrectos",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"passwordConfirmation\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				},
				{
					"name": "El usuario ya existe",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer <token>",
								"description": "Added as a part of security scheme: bearer"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"passwordConfirmation\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"status": "Conflict",
					"code": 409,
					"_postman_previewlanguage": "text",
					"header": [],
					"cookie": [],
					"body": ""
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://eduplanner.fly.dev",
			"type": "string"
		}
	]
}